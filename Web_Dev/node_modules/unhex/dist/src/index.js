#!/usr/bin/env node
"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.parseFile = exports.readDir = void 0;
const fs_1 = __importDefault(require("fs"));
const utils_1 = require("./utils");
const unhex_config_1 = __importDefault(require("../unhex.config"));
const cli_1 = require("./cli");
const path_1 = require("path");
const regex_1 = require("./regex");
async function main() {
    const conf = await (0, cli_1.cli)();
    readDir(process.cwd(), true, conf);
}
main();
function readDir(dir, writeFile = true, conf = unhex_config_1.default) {
    return fs_1.default.readdirSync(dir).map((file) => {
        if (conf.ignoredFilesAndPaths?.split(', ').includes(file))
            return;
        const path = (0, path_1.join)(dir, file);
        const isDir = fs_1.default.existsSync(path) && fs_1.default.lstatSync(path).isDirectory();
        if (isDir) {
            readDir(path, writeFile, conf);
        }
        else {
            const extension = path.split('.').pop();
            if (conf.extensionsAllowed?.includes('*') || conf.extensionsAllowed?.includes(`.${extension}`)) {
                return parseFile(path, writeFile, conf.direction);
            }
        }
    });
}
exports.readDir = readDir;
function parseFile(fileName, writeFile = true, direction) {
    console.log('Parsing file: ', fileName);
    const fileContent = fs_1.default.readFileSync(`${fileName}`, 'utf8');
    if (direction === 'hexToRgb') {
        const rgbData = fileContent.replace(regex_1.hexMatch, (hex) => {
            return (0, utils_1.hexToRgb)(hex);
        });
        writeFile && fs_1.default.writeFileSync(`${fileName}`, rgbData);
        return rgbData;
    }
    if (direction === 'rgbToHex') {
        const hexData = fileContent.replace(regex_1.rgbMatch, (rgb) => {
            return (0, utils_1.rgbToHex)(rgb);
        });
        writeFile && fs_1.default.writeFileSync(`${fileName}`, hexData);
        return hexData;
    }
    if (direction === 'rgbToHsl') {
        const hslData = fileContent.replace(regex_1.rgbMatch, (rgb) => {
            return (0, utils_1.rgbToHsl)(rgb);
        });
        writeFile && fs_1.default.writeFileSync(`${fileName}`, hslData);
        return hslData;
    }
    if (direction === 'hslToRgb') {
        const rgbData = fileContent.replace(regex_1.hslMatch, (hsl) => {
            return (0, utils_1.hslToRgb)(hsl);
        });
        writeFile && fs_1.default.writeFileSync(`${fileName}`, rgbData);
        return rgbData;
    }
    if (direction === 'hexToHsl') {
        const rgbData = fileContent.replace(regex_1.hexMatch, (hex) => {
            return (0, utils_1.hexToRgb)(hex);
        });
        const hslData = rgbData.replace(regex_1.rgbMatch, (rgb) => {
            return (0, utils_1.rgbToHsl)(rgb);
        });
        writeFile && fs_1.default.writeFileSync(`${fileName}`, hslData);
        return hslData;
    }
    if (direction === 'hslToHex') {
        const rgbData = fileContent.replace(regex_1.hslMatch, (hsl) => {
            return (0, utils_1.hslToRgb)(hsl);
        });
        const hexData = rgbData.replace(regex_1.rgbMatch, (rgb) => {
            return (0, utils_1.rgbToHex)(rgb);
        });
        writeFile && fs_1.default.writeFileSync(`${fileName}`, hexData);
        return hexData;
    }
    if (direction === 'allToRgb') {
        const hexToRgbData = fileContent.replace(regex_1.hexMatch, (hex) => {
            return (0, utils_1.hexToRgb)(hex);
        });
        const hslToRgbData = hexToRgbData.replace(regex_1.hslMatch, (hsl) => {
            return (0, utils_1.hslToRgb)(hsl);
        });
        if (writeFile) {
            fs_1.default.writeFileSync(`${fileName}`, hslToRgbData);
        }
        return hslToRgbData;
    }
    if (direction === 'allToHex') {
        const rgbToHexData = fileContent.replace(regex_1.rgbMatch, (rgb) => {
            return (0, utils_1.rgbToHex)(rgb);
        });
        const hslToRgbData = rgbToHexData.replace(regex_1.hslMatch, (hsl) => {
            return (0, utils_1.hslToRgb)(hsl);
        });
        const rgbToHexData2 = hslToRgbData.replace(regex_1.rgbMatch, (rgb) => {
            return (0, utils_1.rgbToHex)(rgb);
        });
        if (writeFile) {
            fs_1.default.writeFileSync(`${fileName}`, rgbToHexData2);
        }
        return rgbToHexData2;
    }
    if (direction === 'allToHsl') {
        const hexToRgbData = fileContent.replace(regex_1.hexMatch, (hex) => {
            return (0, utils_1.hexToRgb)(hex);
        });
        const rgbToHslData = hexToRgbData.replace(regex_1.rgbMatch, (rgb) => {
            return (0, utils_1.rgbToHsl)(rgb);
        });
        const hexToRgbData2 = rgbToHslData.replace(regex_1.hexMatch, (hex) => {
            return (0, utils_1.hexToRgb)(hex);
        });
        if (writeFile) {
            fs_1.default.writeFileSync(`${fileName}`, hexToRgbData2);
        }
        return hexToRgbData2;
    }
}
exports.parseFile = parseFile;
