"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.cli = void 0;
const fs_1 = __importDefault(require("fs"));
const path_1 = require("path");
const inquirer_1 = __importDefault(require("inquirer"));
const chalk_1 = __importDefault(require("chalk"));
const CONFIG_FILENAME = 'unhex.config.js';
async function cli() {
    try {
        const actualConfig = require((0, path_1.join)(process.cwd(), CONFIG_FILENAME));
        if (actualConfig) {
            const shouldReplaceConfig = await askReplaceConfig({
                actualExtensionsAllowed: actualConfig.extensionsAllowed,
                actualDirection: actualConfig.direction,
                actualIgnoredFilesAndPaths: actualConfig.ignoredFilesAndPaths,
            });
            if (!shouldReplaceConfig)
                return actualConfig;
        }
        return await ask();
    }
    catch {
        return await ask();
    }
}
exports.cli = cli;
async function ask() {
    const extensionsAllowed = await askExtensions();
    const direction = await askDirection();
    const ignoredFilesAndPaths = await askIgnoredFilesAndPaths();
    console.log(chalk_1.default.blue('Configuration:'));
    console.log(chalk_1.default.blue('-------------------------'));
    console.log(chalk_1.default.blue('Direction selected: ', direction));
    console.log(chalk_1.default.blue('Extensions selected: ', extensionsAllowed));
    console.log(chalk_1.default.blue('Ignored files selected: ', ignoredFilesAndPaths));
    fs_1.default.writeFileSync((0, path_1.join)(process.cwd(), CONFIG_FILENAME), `module.exports = {
          extensionsAllowed: "${extensionsAllowed}",
          direction: "${direction}",
          ignoredFilesAndPaths: "${ignoredFilesAndPaths}"
      };`);
    console.log(chalk_1.default.green('Configuration file created! You can edit this file manually as unhex.config.js on this directory'));
    return {
        extensionsAllowed,
        direction,
        ignoredFilesAndPaths,
    };
}
async function askExtensions() {
    let done = false;
    let extensions = new Set();
    while (!done) {
        const extension = await getExtensions();
        if (extension !== '--')
            extensions.add(extension);
        if (extension === '--' || extension === '*') {
            done = true;
        }
        console.log(chalk_1.default.blue('Extensions selected: ', [...extensions].join(', ')));
    }
    return [...extensions].join(', ');
}
async function askDirection() {
    const { direction } = await inquirer_1.default.prompt({
        name: 'direction',
        type: 'list',
        message: 'Direction',
        choices: [
            'hexToRgb',
            'rgbToHex',
            'rgbToHsl',
            'hslToRgb',
            'hexToHsl',
            'hslToHex',
            'allToRgb',
            'allToHex',
            'allToHsl',
        ],
        default() {
            return 'hexToRgb';
        },
    });
    return direction;
}
async function askIgnoredFilesAndPaths() {
    const { ignoredFilesAndPaths } = await inquirer_1.default.prompt({
        name: 'ignoredFilesAndPaths',
        type: 'input',
        message: 'Ignore files/paths',
        default() {
            return 'node_modules, .git, .vscode, dist, build, .next, .gitignore';
        },
    });
    console.log(chalk_1.default.blue('Ignored files selected: ', ignoredFilesAndPaths));
    return ignoredFilesAndPaths.split(', ').join(', ');
}
async function askReplaceConfig({ actualExtensionsAllowed, actualDirection, actualIgnoredFilesAndPaths, }) {
    try {
        const actualConfig = {
            actualExtensionsAllowed,
            actualDirection,
            actualIgnoredFilesAndPaths,
        };
        const { shouldReplaceConfig } = await inquirer_1.default.prompt({
            name: 'shouldReplaceConfig',
            type: 'confirm',
            message: `Config file found.\n ${JSON.stringify(actualConfig, null, 2)} \n Do you want to replace it?`,
        });
        return shouldReplaceConfig;
    }
    catch (err) {
        console.error(err);
        return false;
    }
}
async function getExtensions() {
    const { extension } = await inquirer_1.default.prompt({
        name: 'extension',
        type: 'list',
        message: 'File extensions to convert',
        choices: ['*', '.css', '.jsx', '.tsx', '.scss', '.svelte', '.vue', '--'],
        default() {
            return '*';
        },
    });
    return extension;
}
