"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
exports.__esModule = true;
exports.Entity = exports.EntityData = exports.ColumnInfo = void 0;
require("reflect-metadata");
var Db_1 = require("../Db");
var Where_1 = require("../query/Where");
var Util_1 = require("../Util");
var ColumnInfo = /** @class */ (function () {
    function ColumnInfo() {
        this.toDb = Util_1.Util.defaultToDb;
        this.fromDb = Util_1.Util.defaultFromDb;
    }
    return ColumnInfo;
}());
exports.ColumnInfo = ColumnInfo;
var EntityData = /** @class */ (function () {
    function EntityData() {
        this.primaryKey = [];
        this.columns = {};
    }
    EntityData.getFrom = function (constructor) {
        if (!constructor.entityData)
            constructor.entityData = new EntityData;
        return constructor.entityData;
    };
    EntityData.addColumn = function (target, column) {
        column = __assign(__assign({}, new ColumnInfo), column);
        column.Type = Reflect.getMetadata('design:type', target, column.key);
        EntityData.getFrom(target.constructor).columns[column.key] = column;
    };
    return EntityData;
}());
exports.EntityData = EntityData;
var Entity = /** @class */ (function () {
    function Entity() {
    }
    Entity.prototype.preSave = function () { };
    ;
    Entity.prototype.postSave = function () { };
    ;
    Entity.prototype.preDelete = function () { };
    ;
    Entity.prototype.postDelete = function () { };
    ;
    Entity.prototype.preGet = function () { };
    ;
    Entity.prototype.postGet = function () { };
    ;
    //
    Entity.prototype.save = function () {
        var _this = this;
        this.preSave();
        var entityData = EntityData.getFrom(this.constructor);
        var toInsert = {};
        Object.keys(entityData.columns).forEach(function (columnKey) {
            var column = entityData.columns[columnKey];
            toInsert[columnKey] = column.toDb(_this[columnKey]);
        });
        Db_1.Db.Insert({
            table: entityData.table,
            columnValues: toInsert,
            rewrite: true
        });
        this.postSave();
    };
    Entity.prototype["delete"] = function () {
        var _this = this;
        this.preDelete();
        var entityData = EntityData.getFrom(this.constructor);
        var clauses = entityData.primaryKey.map(function (pKey) { return ['@' + pKey, '=', entityData.columns[pKey].toDb(_this[pKey])]; });
        var where = Where_1.AND.apply(void 0, clauses);
        Db_1.Db.Delete({
            table: entityData.table,
            where: where
        });
        this.postDelete();
    };
    //
    //
    //
    Entity.buildWhereId = function (id) {
        var entityData = EntityData.getFrom(this.prototype.constructor);
        if (!Array.isArray(id))
            id = [id];
        var clauses = entityData.primaryKey.map(function (pKey, i) { return ['@' + pKey, '=', entityData.columns[pKey].toDb(id[i])]; });
        return Where_1.AND.apply(void 0, clauses);
    };
    Entity["delete"] = function (id) {
        var entityData = EntityData.getFrom(this.prototype.constructor);
        //@ts-ignore
        var whereId = this.buildWhereId(id);
        Db_1.Db.Delete({
            table: entityData.table,
            where: whereId
        });
    };
    Entity.getById = function (id, columns) {
        if (columns === void 0) { columns = '*'; }
        var entityData = EntityData.getFrom(this.prototype.constructor);
        //@ts-ignore
        var whereId = this.buildWhereId(id);
        var dbResult = Db_1.Db.Select.Get({
            table: entityData.table,
            columns: columns,
            where: whereId
        });
        // ACCESSING STATIC METHOD FROM CHILD INSTANCE (FALLBACK TO PARENT)
        //@ts-ignore
        return this.from(dbResult);
    };
    Entity.from = function (dbResult) {
        var _this = this;
        if (!dbResult)
            return null;
        var entity = new this();
        //@ts-ignore
        entity.preGet();
        Object.keys(dbResult).forEach(function (columnKey) {
            // ACCESSING STATIC PROPERTY FROM CHILD INSTANCE (FALLBACK TO PARENT)
            //@ts-ignore
            var columnInfo = _this.entityData.columns[columnKey];
            var dbValue = dbResult[columnKey];
            var value = columnInfo.fromDb(dbValue, columnInfo.Type);
            entity[columnKey] = value;
        });
        //@ts-ignore
        entity.postGet();
        return entity;
    };
    return Entity;
}());
exports.Entity = Entity;
