import "reflect-metadata";
import { DbValue, FuncFromDb, FuncToDb } from "../Db";
import { SelectColumns } from "../query/Select";
export declare type EntityId = DbValue | DbValue[];
export declare class ColumnInfo {
    key: string;
    Type?: any;
    toDb?: FuncToDb;
    fromDb?: FuncFromDb;
}
export declare class EntityData {
    table: string;
    primaryKey: string[];
    columns: {
        [column: string]: ColumnInfo;
    };
    static getFrom(constructor: any): EntityData;
    static addColumn(target: any, column: ColumnInfo): void;
}
export declare abstract class Entity {
    static entityData: any;
    protected preSave(): void;
    protected postSave(): void;
    protected preDelete(): void;
    protected postDelete(): void;
    protected preGet(): void;
    protected postGet(): void;
    save(): void;
    delete(): void;
    static buildWhereId(id: EntityId): import("../query/Where").WhereGroup;
    static delete(id: EntityId): void;
    static getById<T>(this: new () => T, id: EntityId, columns?: SelectColumns): T;
    static from<T>(this: new () => T, dbResult: any): T;
}
