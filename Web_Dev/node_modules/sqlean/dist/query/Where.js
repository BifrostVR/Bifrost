"use strict";
exports.__esModule = true;
exports.OR = exports.AND = exports.WhereBuilder = exports.WhereResult = void 0;
var Util_1 = require("../Util");
var WhereResult = /** @class */ (function () {
    function WhereResult() {
    }
    return WhereResult;
}());
exports.WhereResult = WhereResult;
var WhereBuilder = /** @class */ (function () {
    function WhereBuilder(where) {
        this._paramI = 0;
        this.sql = '';
        this.params = {};
        this.sql = this
            .parseWhere(where)
            .replace(/@([a-zA-Z]+)/gm, function (match, column) { return Util_1.Util.toSnakeCase(column); });
        ;
    }
    WhereBuilder.prototype.getResult = function () {
        var result = new WhereResult;
        result.sql = (this.sql === '' ? '' : 'WHERE ' + this.sql);
        result.params = this.params;
        return result;
    };
    //
    //
    //
    WhereBuilder.prototype.parseWhere = function (where) {
        if (typeof where === 'string')
            return where;
        if (where.length === 3)
            return this.parseClause(where);
        return this.parseGroup(where);
    };
    WhereBuilder.prototype.parseClause = function (clause) {
        var _this = this;
        var left = clause[0];
        var right = clause[2];
        var parseValue = function (value) {
            if (typeof value === 'string') {
                if (value[0] === '@')
                    return value;
                if (value[0] === '^')
                    return value.substring(1);
            }
            var out = '$param' + _this._paramI;
            _this.params['param' + _this._paramI] = value;
            _this._paramI++;
            return out;
        };
        left = parseValue(left);
        right = parseValue(right);
        var operator = clause[1];
        return left + " " + operator + " " + right;
    };
    WhereBuilder.prototype.parseGroup = function (group) {
        var _this = this;
        var sql = '';
        group[1].forEach(function (where, i, arr) {
            sql += '(' + _this.parseWhere(where) + ')';
            if (i !== arr.length - 1)
                sql += ' ' + group[0] + ' ';
        });
        return sql;
    };
    return WhereBuilder;
}());
exports.WhereBuilder = WhereBuilder;
function AND() {
    var where = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        where[_i] = arguments[_i];
    }
    return ['AND', where];
}
exports.AND = AND;
function OR() {
    var where = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        where[_i] = arguments[_i];
    }
    return ['OR', where];
}
exports.OR = OR;
