"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
exports.__esModule = true;
exports.Select = exports.PreparedSelect = exports.SelectData = void 0;
var Db_1 = require("../Db");
var Util_1 = require("../Util");
var Where_1 = require("./Where");
var SelectData = /** @class */ (function () {
    function SelectData() {
        this.order = {};
        this.pluck = false;
    }
    return SelectData;
}());
exports.SelectData = SelectData;
var PreparedSelect = /** @class */ (function () {
    function PreparedSelect() {
    }
    return PreparedSelect;
}());
exports.PreparedSelect = PreparedSelect;
var Select = /** @class */ (function () {
    function Select() {
    }
    Select.Prepare = function (data) {
        var result = new PreparedSelect;
        data = __assign(__assign({}, new SelectData), data);
        var sqlColumns = Select.getSqlColumns(data.columns);
        var whereResults = new Where_1.WhereBuilder(data.where || '').getResult();
        var sqlOrder = Select.getSqlOrder(data.order);
        var sql = "\n            SELECT  " + sqlColumns + "\n            FROM    " + data.table + "\n            " + whereResults.sql + "\n            " + sqlOrder + "\n            " + (typeof data.limit === 'number' ? "LIMIT " + data.limit : '') + "\n            " + (typeof data.offset === 'number' ? "OFFSET " + data.offset : '') + "\n        ";
        // For Debug
        // console.log(sql);
        result.statement = Db_1.DB._db.prepare(sql).pluck(data.pluck);
        result.whereParams = whereResults.params;
        return result;
    };
    Select.Get = function (data) {
        var prepareResult = this.Prepare(data);
        var result = prepareResult.statement.get(prepareResult.whereParams) || null;
        return Util_1.Util.objToCamelCase(result);
    };
    Select.All = function (data) {
        var prepareResult = this.Prepare(data);
        var result = prepareResult.statement.all(prepareResult.whereParams);
        if (result.length === 0)
            return null;
        return result.map(function (row) { return Util_1.Util.objToCamelCase(row); });
    };
    //
    // 
    //
    Select.getSqlColumns = function (columns) {
        if (!Array.isArray(columns))
            columns = [columns];
        return columns.map(function (column) { return Util_1.Util.toSnakeCase(column); }).join(', ');
    };
    Select.getSqlOrder = function (order) {
        var sql = '';
        Object.keys(order).forEach(function (column, i, arr) {
            sql += " " + Util_1.Util.toSnakeCase(column) + " " + order[column];
            if (i !== arr.length - 1)
                sql += ',';
        });
        if (sql !== '')
            sql = 'ORDER BY ' + sql;
        return sql;
    };
    return Select;
}());
exports.Select = Select;
